@page "/AddGenre"

@inject IDbContextFactory<DataContext> ContextFactory
@inject NavigationManager NavigationManager

<AuthorizeView Roles="Admin">
    <Authorized Context="AuthContext">

        <EditForm Model="_createGenre" OnValidSubmit="SaveGenreAsync">
            <div class="form-control d-flex flex-column m-auto text-center" style="max-width:900px">
                <h4>Добавить новый жанр</h4>

                <DataAnnotationsValidator />
                <ValidationSummary />

                <label for="name" class="form-label">Название</label>
                <InputText id="name" type="text" class="form-input form-control" @bind-Value="_createGenre.Name" />
                <ValidationMessage For="@(() => _createGenre.Name)" />

                <label for="description" class="form-label">Описание жанра</label>
                <InputText id="description" type="text" class="form-input form-control" @bind-Value="_createGenre.Description" />
                <ValidationMessage For="@(() => _createGenre.Description)" />

            </div>

            <div class="w-100 text-center p-5"><button class="btn btn-success btn-lg">Сохранить жанр</button></div>
            <div class="w-100 text-center p-5">
                <div class="alert-success">@validationMessage</div>
            </div>
        </EditForm>

    </Authorized>

    <NotAuthorized>
        <div>Не авторизован</div>
    </NotAuthorized>
</AuthorizeView>

@code {
    Genre _createGenre = new Genre();

    string validationMessage = "";

    async Task ResetValidationMessage()
    {
        await Task.Delay(2000);
        validationMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    async Task SaveGenreAsync()
    {
        using (var repo = new GenreRepository(ContextFactory.CreateDbContext()))
        {
            await repo.CreateGenreAsync(_createGenre);
        }
        _createGenre = new Genre();
        validationMessage = "Жанр успешно добавлен!";
        await InvokeAsync(StateHasChanged);
        await ResetValidationMessage();

        NavigationManager.NavigateTo($"/ManageGenres");
    }
}
